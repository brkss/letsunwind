package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/brkss/gogql/graph/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// GetAwarenesses is the resolver for the GetAwarenesses field.
func (r *queryResolver) GetAwarenesses(ctx context.Context) ([]*model.Awareness, error) {
	list, err := r.Store.GetAwarnesses(ctx)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Something went wrong !",
		}
	}
	var results []*model.Awareness
	for _, item := range list {
		results = append(results, &model.Awareness{
			ID:             item.ID,
			Title:          item.Title,
			GradientTop:    item.GradientTop,
			GradientBottom: item.GradientBottom,
			Image:          &item.Image,
		})
	}
	return results, nil
	//panic(fmt.Errorf("not implemented: GetAwarenesses - GetAwarenesses"))
}

// GetAwarenessInfo is the resolver for the getAwarenessInfo field.
func (r *queryResolver) GetAwarenessInfo(ctx context.Context, id string) (*model.Awareness, error) {
	awarenss, err := r.Store.GetAwarness(ctx, id)

	if err != nil {
		return nil, &gqlerror.Error{
			Message: "awareness not found !",
		}
	}

	return &model.Awareness{
		ID:             awarenss.ID,
		Title:          awarenss.Title,
		Content:        &awarenss.Content,
		GradientTop:    awarenss.GradientTop,
		GradientBottom: awarenss.GradientBottom,
	}, nil
}
