package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	db "github.com/brkss/gogql/db/sqlc"
	"github.com/brkss/gogql/graph/model"
	"github.com/brkss/gogql/middleware"
	"github.com/brkss/gogql/otp"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *model.LoginUserInput) (*model.AuthResponse, error) {
	user, err := r.Store.GetUserByEmail(ctx, input.Email)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "User not found ",
		}
	}

	otp, err := otp.CreateOTP(user.ID, r.Store, ctx)

	msg := "Verification code sent to your email : " + otp
	return &model.AuthResponse{
		Status:  true,
		Message: &msg,
	}, nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input *model.RegisterUserInput) (*model.AuthResponse, error) {
	arg := db.CreateUserParams{
		ID:       uuid.New().String(),
		Name:     input.Name,
		Email:    input.Email,
		Password: "none--",
		Age:      int32(input.Age),
	}
	user, err := r.Store.CreateUser(ctx, arg)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "cannot create user ! : " + err.Error(),
		}
	}

	otp, err := otp.CreateOTP(user.ID, r.Store, ctx)

	msg := "Verification code sent to your email : " + otp
	return &model.AuthResponse{
		Status:  true,
		Message: &msg,
	}, nil
}

// VerifyUser is the resolver for the verifyUser field.
func (r *mutationResolver) VerifyUser(ctx context.Context, input *model.VerificationRequest) (*model.AuthorizationResponse, error) {
	user, err := r.Store.GetUserByEmail(ctx, input.Email)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "invalid user !",
		}
	}
	ok, err := otp.VerifyOTP(input.Code, user.ID, r.Store, ctx)
	if err != nil || !ok {
		fmt.Print("error : ", err, "\n", user.ID, input.Code)
		return nil, &gqlerror.Error{
			Message: "Invalid Code !",
		}
	}
	token, accessPayload, err := r.Maker.CreateToken(user.ID, r.Config.TokenDuration)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Cannot create token !",
		}
	}

	refreshToken, refreshPayload, err := r.Maker.CreateToken(user.ID, r.Config.RefreshTokenDuration)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Cannot create refresh token !",
		}
	}

	// create session !
	_, err = r.Store.CreateSession(ctx, db.CreateSessionParams{
		ID:        refreshPayload.ID,
		UserID:    user.ID,
		Token:     refreshToken,
		ExpiredAt: refreshPayload.ExpireAt,
		Blocked:   false,
	})
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "cannot create refresh token !",
		}
	}

	ac_exp := accessPayload.ExpireAt.String()
	rf_exp := refreshPayload.ExpireAt.String()
	return &model.AuthorizationResponse{
		Status:                true,
		AccessToken:           &token,
		RefreshToken:          &refreshToken,
		RefreshTokenExpiresAt: &rf_exp,
		AccessTokenExpiresAt:  &ac_exp,
	}, nil
}

// Me is the resolver for the Me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	payload := middleware.GetPayload(ctx)
	if payload == nil {
		return nil, &gqlerror.Error{
			Message: "Access Denied",
		}
	}
	user, err := r.Store.GetUser(ctx, payload.UserID)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Something went wrong !",
		}
	}

	response := model.User{
		ID:    user.ID,
		Name:  user.Name,
		Email: user.Email,
	}

	return &response, nil
}
