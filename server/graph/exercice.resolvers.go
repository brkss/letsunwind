package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	db "github.com/brkss/gogql/db/sqlc"
	"github.com/brkss/gogql/graph/model"
	"github.com/brkss/gogql/middleware"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateExercice is the resolver for the createExercice field.
func (r *mutationResolver) CreateExercice(ctx context.Context, input *model.CreateExerciceInput) (*model.CreateExerciceResponse, error) {
	payload := middleware.GetPayload(ctx)
	if payload == nil {
		return nil, &gqlerror.Error{
			Message: "Access Denied",
		}
	}
	user, err := r.Store.GetUser(ctx, payload.UserID)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Invalid User",
		}
	}
	arg := db.CreateExerciceParams{
		ID:       uuid.New().String(),
		Name:     input.Name,
		Duration: input.Duration,
		UserID:   user.ID,
	}
	ex, err := r.Store.CreateExercice(ctx, arg)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Something went wrong, please try again",
		}
	}

	return &model.CreateExerciceResponse{
		Exercice: &model.Exercice{
			ID:        ex.ID,
			Name:      ex.Name,
			Duration:  ex.Duration,
			UserID:    ex.UserID,
			CreatedAt: ex.CreatedAt.String(),
		},
		Status: true,
	}, nil
	//panic(fmt.Errorf("not implemented: CreateExercice - createExercice"))
}

// GetExercices is the resolver for the getExercices field.
func (r *queryResolver) GetExercices(ctx context.Context) ([]*model.Exercice, error) {
	payload := middleware.GetPayload(ctx)
	if payload == nil {
		return nil, &gqlerror.Error{
			Message: "Access Denied",
		}
	}
	exercices, err := r.Store.GetExercices(ctx, payload.UserID)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Unable to find exercices",
		}
	}

	var exs []*model.Exercice
	for _, e := range exercices {
		exs = append(exs, &model.Exercice{
			ID:        e.ID,
			Name:      e.Name,
			Duration:  e.Duration,
			UserID:    e.UserID,
			CreatedAt: e.CreatedAt.String(),
		})
	}
	return exs, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
